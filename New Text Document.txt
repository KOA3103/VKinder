import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# initialize vk session
vk_session = vk_api.VkApi(token="your_token")

# initialize long poll
longpoll = VkLongPoll(vk_session)

# handling new messages
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        # get message text
        message_text = event.text.lower()

        # handle message
        if message_text == "hello":
            vk_session.method("messages.send", {"peer_id": event.peer_id, "message": "Hello! How can I help you?", "random_id": 0})
        elif message_text == "bye":
            vk_session.method("messages.send", {"peer_id": event.peer_id, "message": "Goodbye! Have a nice day!", "random_id": 0})
        else:
            vk_session.method("messages.send", {"peer_id": event.peer_id, "message": "I'm sorry, I didn't understand you.", "random_id": 0})


 import os
from vk_api.longpoll import VkLongPoll, VkEventType
from random import randrange
import datetime
import vk_api
import time
import json
from pprint import pprint
from config import user_token, group_token


vk_session = vk_api.VkApi(token=user_token, api_version='5.131')  # Создаем переменную сесии.
vk = vk_session.get_api()  # Создаем другую переменную (vk), где переменную сесии (vk_session) подключаем к api списку методов.
vk_session._auth_token()  # Авторизация токена.

group_vk_session = vk_api.VkApi(token=group_token, api_version='5.131')  # Создаем переменную сесии group_token.
vk_longpoll = VkLongPoll(group_vk_session)  # Создаем другую переменную (vk_longpoll), где переменную сесии (group_vk_session) подключаем к классу VkLongPoll.



def get_last_msg():
    messages = vk_session.method("messages.getConversations",
                                 {"offset": 0, "count": 100, "filter": "unanswered", "group_id": 218321292})
    # print(f'messages-  \n {messages}')
    text1 = messages['items'][0]
    text2 = messages['items'][0]['conversation']
    text3 = messages['items'][0]['conversation']['peer']
    text4 = messages['items'][0]['conversation']['last_message_id']
    text5 = messages['items'][0]['conversation']['peer']['id']
    text6 = messages['items'][0]['conversation']['peer']["type"]
    text7 = messages["items"][0]["last_message"]

    text80 = messages["items"][0]["last_message"]["date"]
    time_bc = datetime.datetime.fromtimestamp(int(text80))
    text8 = str(time_bc.strftime('%d.%m.%Y-%H.%M.%S'))

    text9 = messages["items"][0]["last_message"]["from_id"]  # id пользователя от которого пришло сообщение
    text10 = messages["items"][0]["last_message"]["text"]

    # print(f'text1 = messages["items"][0]- \n {text1} \n')
    # print(f'text2 = messages["items"][0]["conversation"]- \n {text2} \n')
    # print(f'text3 = messages["items"][0]["conversation"]["peer"]- \n {text3} \n')
    # print(f'text4 = messages["items"][0]["conversation"]["last_message_id"]- \n {text4} \n')
    # print(f'text5 = messages["items"][0]["conversation"]["peer"]["id"]- \n {text5} \n')
    # print(f'text6 = messages["items"][0]["conversation"]["peer"]["type"]- \n {text6} \n')
    # print(f'text7 = messages["items"][0]["last_message"]- \n {text7} \n')

    # print(f'text8 = messages["items"][0]["last_message"]["date"]- \n {text80} -> {text8} \n')

    # print(f'text9 = messages["items"][0]["last_message"]["from_id"]- \n {text9} \n')
    # print(f'text10 = messages["items"][0]["last_message"]["text"]- \n {text10} \n')

    user_id = messages['items'][0]['last_message']['from_id']
    # print(user_id)
    print(f'{text8} Ползователь: {user_id}, сообщил: {text10}')
    return user_id


def get_user_status(user_id):
    status = vk_session.method("status.get", {"user_id": user_id})
    # print(status["text"])
    print(status)

# get_user_status(22221403)

def get_user_info(user_id):
    # info = vk.users.get(user_id=user_id)
    info = vk_session.method('users.get', {'user_id': user_id})
    print(info[0]['first_name'])

# get_user_info(22221403)


# def get_group_status(group_id):
#     status = vk_session.method("status.get", {"group_id": group_id})
#     print(status["text"])

def get_group_status(group_id):
    status = vk.status.get(group_id=group_id)
    print(status["text"])


def set_user_status(text):
    vk.status.set(text=text)


# def set_group_status():
#     vk.status.set(text="Service bot under development!", group_id=218321292)

def set_group_status(text, group_id):
    vk_session.method("status.set", {"text": text, "group_id": group_id})


def get_friends_status(user_id):
    friends = vk_session.method("friends.get", {"user_id": user_id})
    num = 0
    for friend in friends["items"]:
        friend_info = vk.users.get(user_ids=friend)
        # print(f'{num}. {friend_info}')
        try:
            num += 1
            friend_status = vk.status.get(user_id=friend)
            if friend_status["text"] == "":
                continue
            else:
                print(
                    f'{num}. {friend_info[0]["first_name"]} {friend_info[0]["last_name"]} <-> {friend_status["text"]}')
        except vk_api.exceptions.ApiError:
            num -= 1
            pass


def get_friends_is_banned(user_id):
    friends = vk_session.method("friends.get", {"user_id": user_id})
    num_bunned = 0
    for friend in friends["items"]:
        friend_info = vk.users.get(user_ids=friend)
        # print(f'{num}. {friend_info}')
        try:
            num_bunned += 1
            print(
                f'{num_bunned}. {friend_info[0]["first_name"]} {friend_info[0]["last_name"]} <-> {friend_info[0]["deactivated"]}')
        except KeyError:
            num_bunned -= 1
            pass

def get_friend_info(user_id):
    friends = vk_session.method("friends.get", {"user_id": user_id})
    num = 0
    for friend in friends["items"]:
        friend_info = vk.users.get(user_ids=friend)
        # print(f'{num}. {friend_info}')
        try:
            num += 1
            friend_status = vk.status.get(user_id=friend)
            print(f'{num}. {friend_info[0]["id"]}: {friend_info[0]["first_name"]} {friend_info[0]["last_name"]} <-> {friend_status["text"]}')
        except vk_api.exceptions.ApiError:
            num -= 1
            pass


# def send_message(user_id, message):
#     vk_session.method("messages.send", {
#         "user_id": user_id,
#         "message": message,
#         "random_id": randrange(10 ** 7),
#     })


# def bot_send_msg(user_id, message):
#     group_vk_session.method("messages.send", {
#         "user_id": user_id,
#         "message": message,
#         "random_id": randrange(10 ** 7),
#     })
#
# for event in vk_longpoll.listen():
#     if event.type == VkEventType.MESSAGE_NEW and event.to_me:
#         text = event.text.lower()
#         user_id = event.user_id
#
#         if text == "hi":
#             bot_send_msg(user_id, " 3 Привет! What's up?:)")


# get_last_msg()

# set_user_status("My studying Python in progress! Like, Like)")
# set_group_status("Now service bot under development!", 218321292)

# get_user_status(158189236)
# get_group_status(218321292)

# get_friends_status(158189236)
# get_friends_is_banned(158189236)

# get_friend_info(158189236)

# send_message(158189236)
# send_message(205642650)
# send_message(22221403, "звони на МТС мой 2й номер: ")
# send_message(22221403, "")
# send_message(22221403, "у меня 'Волна' если че")


def users_search(city):
    res = vk.users.search(
        sort=0,
        hometown=city,
        sex=1,  # 1— женщина, 2 — мужчина, 0 — любой (по умолчанию).
        status=1,  # 1 — не женат или не замужем, 6 — в активном поиске.
        age_from=16,
        age_to=50,
        has_photo=1,  # 1 — искать только пользователей с фотографией, 0 — искать по всем пользователям
        count=1000
    )
    print(res)
    # print(res['items'])
    # print(res['items'][0]["id"])
    number = 0
    # print(res['items'][0]['first_name'], res['items'][0]['last_name'])
    for user in res['items']:
        number += 1
        print(f'{number}. {user["first_name"]} {user["last_name"]}, {user["id"]} ')
    print(res['count'])


# users_search("москва")
# users_search("Бахчисарай")

def user_photo(owner_id):
    res = vk.photos.get(
        owner_id=str(owner_id),
        album_id="wall",  # wall — фотографии со стены, profile — фотографии профиля.
        extended=1  # 1 — будут возвращены дополнительные поля likes, comments, tags, can_comment, reposts. По
        # умолчанию: 0.
    )
    number = 0
    for user in res['items']:
        number += 1
        print(1, user["sizes"])
        for size in user["sizes"]:
            print(number)


            if size["type"] == "w":
                print(number, "w", size["url"])
                if size["type"] == "r":
                    print(number, "r", size["url"])
                    if size["type"] == "q":
                        print(number, "q", size["url"])
                        if size["type"] == "z":
                            print(number, "z", size["url"])
                            if size["type"] == "y":
                                print(number, "y", size["url"])
                                if size["type"] == "x":
                                    print(number, "x", size["url"])
        # if user["sizes"][0] == "w":

        # print(f'{number}.1 m {user["sizes"][0]}')
        # print(f'{number}.2 o {user["sizes"][1]}')
        # print(f'{number}.3 p {user["sizes"][2]}')
        # print(f'{number}.4 q {user["sizes"][3]}')
        # print(f'{number}.5 r {user["sizes"][4]}')
        # print(f'{number}.6 s {user["sizes"][5]}')
        # print(f'{number}.7 w {user["sizes"][6]}')
        # try:
        #     print(f'{number}.8 x {user["sizes"][7]}')
        # except IndexError:
        #     continue
        # try:
        #     print(f'{number}.9 y {user["sizes"][8]}')
        # except IndexError:
        #     continue
        # try:
        #     print(f'{number}.10 z {user["sizes"][9]}')
        # except IndexError:
        #     continue

        # if user["sizes"][6]["type"] == "w":
        #     print(user["sizes"][6]["url"])


        # print(user)
    # pprint(res)

user_photo("52968274")



albums (integer) — количество фотоальбомов;

•
videos (integer) — количество видеозаписей;

•
audios (integer) — количество аудиозаписей;

•
photos (integer) — количество фотографий;

•
notes (integer) — количество заметок;

•
friends (integer) — количество друзей;

•
groups (integer) — количество сообществ;

•
online_friends (integer) — количество друзей онлайн;

•
mutual_friends (integer) — количество общих друзей;

•
user_videos (integer) — количество видеозаписей с пользователем;

•
followers (integer) — количество подписчиков;

•
pages (integer) — количество объектов в блоке «Интересные страницы».
----------------------------------------------------------
import datetime

bdate = '6.2.2000'
bdate_splited = bdate.split(".")
reverse_bdate = datetime.date(int(bdate_splited[2]), int(bdate_splited[1]), int(bdate_splited[0]))
print(reverse_bdate)
today = datetime.date.today()
print(today)
years = (today.year-reverse_bdate.year)
if reverse_bdate.month >= today.month and reverse_bdate.day > today.day:
    years -= 1
print(years)